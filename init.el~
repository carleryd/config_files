;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Run on startup
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(initial-frame-alist (quote ((fullscreen . maximized))))
 '(package-selected-packages
   (quote
    (flycheck-inline rainbow-mode yaml-mode web-mode use-package tide solidity-mode purescript-mode psc-ide prettier-js php-mode nix-mode neotree moe-theme js3-mode indium helm-projectile helm-ag haskell-mode go-mode gnugo exec-path-from-shell evil-surround evil-numbers evil-magit evil-leader evil-escape evil-commentary elm-mode editorconfig centered-window alchemist ag add-node-modules-path))))

;; Set Emacs window title to current buffer path
(setq-default frame-title-format
          '(("" invocation-name "@" system-name "\t")
            (buffer-file-name "%f" "%b")))

;; Hide toolbar
(menu-bar-mode -1)


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Install Packages
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;; Added by Package.el.  This must come before configurations of
;; installed packages.  Don't delete this line.  If you don't want it,
;; just comment it out by adding a semicolon to the start of the line.
;; You may delete these explanatory comments.
(package-initialize)
(use-package evil
  :ensure t
  :config
  (evil-mode t)

  (use-package evil-surround
    :ensure t
    :config
    (global-evil-surround-mode 1)
    )
  
  (use-package evil-leader
    :ensure t
    :config
    (global-evil-leader-mode)
    )
  
  (use-package evil-escape
    :ensure t
    :commands evil-escape-mode
    :init
    (setq evil-escape-excluded-states '(normal visual multiedit emacs motion)
          evil-escape-excluded-major-modes '(neotree-mode)
          evil-escape-key-sequence "jk"
          evil-escape-delay 0.05)
    (add-hook 'after-init-hook #'evil-escape-mode)
    :config
    ;; no `evil-escape' in minibuffer
    (cl-pushnew #'minibufferp evil-escape-inhibit-functions :test #'eq)

    (define-key evil-insert-state-map  (kbd "C-g") #'evil-escape)
                                        ; (define-key evil-replace-state-map (kbd "C-g") #'evil-escape)
                                        ; (define-key evil-visual-state-map  (kbd "C-g") #'evil-escape)
                                        ; (define-key evil-motion-state-map  (kbd "C-g") #'evil-escape)
                                        ; (define-key evil-operator-state-map (kbd "C-g") #'evil-escape)
                                        ; (define-key evil-window-map  (kbd "C-g") #'evil-escape)
    )

  (use-package evil-numbers
    :ensure t)

  (use-package evil-magit
    :ensure t
    :config
    (evil-define-key 'normal magit-mode-map (kbd "C-h") 'windmove-left)
    (evil-define-key 'normal magit-mode-map (kbd "C-l") 'windmove-right)
    (evil-define-key 'normal magit-mode-map (kbd "C-k") 'windmove-up)
    (evil-define-key 'normal magit-mode-map (kbd "C-j") 'windmove-down)
    (evil-define-key 'normal magit-mode-map (kbd "SPC") 'evil-scroll-line-to-center)
    (evil-define-key 'normal magit-mode-map (kbd "C-[") 'evil-escape)
    (evil-define-key 'normal magit-mode-map (kbd "C-c d") 'magit-discard)
    (setq magit-display-buffer-function
          (lambda (buffer)
            (display-buffer
             buffer (if (and (derived-mode-p 'magit-mode)
                             (memq (with-current-buffer buffer major-mode)
                                   '(magit-process-mode
                                     magit-revision-mode
                                     magit-diff-mode
                                     magit-stash-mode
                                     magit-status-mode)))
                        nil
                      '(display-buffer-same-window)))))
    )

  (use-package evil-commentary
    :ensure t
    :config
    (define-key evil-visual-state-map (kbd "C-/") 'evil-commentary)
    )
  )

(use-package neotree
  :ensure t
  :config
  (setq projectile-switch-project-action 'neotree-projectile-action)
  (setq neo-window-position 'right)
  (setq neo-window-width 45)
  ; (setq-default neo-show-hidden-files t)
  (add-hook 'neotree-mode-hook
    (lambda ()
      (define-key evil-normal-state-local-map (kbd "q") 'neotree-hide)
      (define-key evil-normal-state-local-map (kbd "I") 'neotree-hidden-file-toggle)
      (define-key evil-normal-state-local-map (kbd "z") 'neotree-stretch-toggle)
      (define-key evil-normal-state-local-map (kbd "R") 'neotree-refresh)
      (define-key evil-normal-state-local-map (kbd "m") 'neotree-rename-node)
      (define-key evil-normal-state-local-map (kbd "c") 'neotree-create-node)
      (define-key evil-normal-state-local-map (kbd "d") 'neotree-delete-node)
      (define-key evil-normal-state-local-map (kbd "s") 'neotree-enter-vertical-split)
      (define-key evil-normal-state-local-map (kbd "S") 'neotree-enter-horizontal-split)
      (define-key evil-normal-state-local-map (kbd "RET") 'neotree-enter)
      )
    )
  )

(use-package company
  :ensure t
  :init
  (setq company-dabbrev-downcase nil
        company-idle-delay 0
        )
  )

(use-package helm
  :ensure t
  :config
  (helm-mode 1)
  (setq helm-autoresize-mode t)
  (setq helm-buffer-max-length 40)
  (global-set-key (kbd "M-x") #'helm-M-x)
  (define-key helm-map (kbd "S-SPC") 'helm-toggle-visible-mark)
  (define-key helm-find-files-map (kbd "C-k") 'helm-find-files-up-one-level)
  (define-key helm-map (kbd "C-j") 'helm-next-line)
  (define-key helm-map (kbd "C-k") 'helm-previous-line)
  )

(use-package projectile
  :ensure t
  :defer t
  :config
  (projectile-global-mode))

(use-package helm-projectile
  :bind (("C-S-P" . helm-projectile-switch-project)
         :map evil-normal-state-map
         ("C-p" . helm-projectile))
  :ensure t
  :config
  (evil-leader/set-key
    "ps" 'helm-projectile-ag
    "pa" 'helm-projectile-find-file-in-known-projects
  ))

(use-package add-node-modules-path
  :ensure t)
(use-package typescript-mode
  :init
  (eval-after-load 'typescript-mode
    '(progn
      (add-hook 'typescript-mode-hook #'add-node-modules-path)))
  :ensure t)
(use-package yaml-mode
  :ensure t
  :mode ("\\.ya?ml\\'" . yaml-mode))
(use-package flycheck
  :ensure t)
(use-package flycheck-inline
  :ensure t)
(use-package exec-path-from-shell
  :ensure t)
(use-package tide
  :ensure t)
(use-package alchemist
  :ensure t)
(use-package magit
  :init
  (progn
    (define-key evil-normal-state-map (kbd "C-c g") 'magit-status)
    (define-key evil-normal-state-map (kbd "C-c b") 'magit-blame)
    )
  :ensure t)
(use-package prettier-js
  :init
  (eval-after-load 'typescript-mode
    '(progn
       (add-hook 'typescript-mode-hook #'prettier-js-mode)
       )
    )
  :ensure t)
(use-package helm-ag
  :ensure t)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Programming Languages
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(use-package solidity-mode
  :ensure t)
(use-package php-mode
  :ensure t)
(use-package purescript-mode
  :ensure t)
(use-package psc-ide
  :init
  (add-hook 'purescript-mode-hook
  (lambda ()
    (psc-ide-mode)
    (company-mode)
    (flycheck-mode)
    (turn-on-purescript-indentation)))
  (setq psc-ide-use-npm-bin t)
  :ensure t)
(use-package haskell-mode
  :ensure t)
(use-package elm-mode
  :ensure t)
(use-package centered-window
  :init
  (centered-window-mode t)
  (defcustom cmw-centered-window-width
    80
    "Minimum column length required to apply the margins."
    :group 'centered-window-mode)
  (defadvice load-theme (after cwm-set-faces-on-load-theme activate)
    "Change the default fringe background whenever these changes."
    (cwm-update-fringe-background))
  :ensure t)
(use-package go-mode
  :ensure t)
(use-package nix-mode
  :ensure t)
(use-package rainbow-mode
  :init
  :ensure t
  :mode ("\\.css\\'" . rainbow-mode))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Require Installed Packages
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; (require 'helm-config)
; (require 'evil)
; (require 'evil-numbers)
; (require 'js3-mode)
; (require 'web-mode)
; ;(require 'rjsx-mode)
; (require 'flycheck)
; ;(require 'flow-minor-mode)
; (require 'exec-path-from-shell)
; (require 'tide)
; (require 'alchemist)
; (require 'php-mode)
; (require 'magit)
; (require 'evil-magit)
; (require 'prettier-js)
; (require 'solidity-mode)
(require 'psc-ide)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Set up hooks
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(add-hook 'after-init-hook #'global-flycheck-mode)
(add-hook 'after-init-hook 'global-company-mode)
(add-to-list 'auto-mode-alist '("components\\/.*\\.css\\'" . scss-mode))
(add-to-list 'auto-mode-alist '("components\\/.*\\.scss\\'" . scss-mode))
(setq-default indent-tabs-mode nil)

(defun typescript-indent-hook ()
  "Hook for setting indent width on different files."
  (setq-default typescript-indent-level 2)
)
(add-hook 'typescript-mode-hook 'typescript-indent-hook)
(add-hook 'after-init-hook '(lambda () (load-theme 'deeper-blue)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Key bindings
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(define-key evil-normal-state-map (kbd "C-h") 'windmove-left)
(define-key evil-normal-state-map (kbd "C-l") 'windmove-right)
(define-key evil-normal-state-map (kbd "C-k") 'windmove-up)
(define-key evil-normal-state-map (kbd "C-j") 'windmove-down)
(define-key evil-normal-state-map (kbd "C-u") 'split-window-horizontally)
(define-key evil-normal-state-map (kbd "C-i") 'split-window-vertically)
(define-key evil-normal-state-map (kbd "C-f") 'split-window-vertically)
(define-key evil-normal-state-map (kbd "SPC") 'evil-scroll-line-to-center)
(define-key evil-normal-state-map (kbd "C-c f") 'helm-projectile-ag)
(define-key evil-normal-state-map (kbd "C-c j") 'tide-jump-to-definition)
(define-key evil-normal-state-map (kbd "C-c k") 'neotree-find)
(define-key evil-normal-state-map (kbd "C-c e") 'eval-buffer)
(define-key evil-normal-state-map (kbd "C-,") 'previous-buffer)
(define-key evil-normal-state-map (kbd "C-.") 'next-buffer)

(global-set-key (kbd "C-a") 'evil-numbers/inc-at-pt)
(global-set-key (kbd "C-`") 'evil-numbers/dec-at-pt)
(global-set-key (kbd "C-c I") 'find-user-init-file)
(global-unset-key (kbd "TAB"))

(defun window-half-height ()
  (max 1 (/ (1- (window-height (selected-window))) 2)))
(defun scroll-up-half ()
  (interactive)
  (scroll-up (window-half-height))
  (previous-line (window-half-height)))
(defun scroll-down-half ()
  (interactive)
  (scroll-down (window-half-height))
  (forward-line (window-half-height)))
(defun scroll-up-one-line ()
  (interactive)
  (scroll-up 1))
(defun scroll-down-one-line ()
  (interactive)
  (scroll-down 1))
  

(define-key evil-normal-state-map (kbd "C-d") 'scroll-up-half)
(define-key evil-normal-state-map (kbd "C-f") 'scroll-down-half)
(define-key evil-visual-state-map (kbd "C-d") 'scroll-up-half)
(define-key evil-visual-state-map (kbd "C-f") 'scroll-down-half)
(define-key evil-visual-state-map (kbd "C-,") 'scroll-up-one-line)
(define-key evil-visual-state-map (kbd "C-m") 'scroll-down-one-line)
(evil-define-key 'normal magit-mode-map (kbd "C-d") 'scroll-up-half)
(evil-define-key 'normal magit-mode-map (kbd "C-f") 'scroll-down-half)

(defun find-user-init-file ()
  "Edit the `user-init-file', in another window."
  (interactive)
  (find-file-existing user-init-file))

(evil-leader/set-key "d" 'neotree-toggle)
(evil-leader/set-key "f" 'buffer-menu)

(evil-add-hjkl-bindings occur-mode-map 'emacs
  (kbd "/")       'evil-search-forward
  (kbd "n")       'evil-search-next
  (kbd "N")       'evil-search-previous
  (kbd "C-d")     'evil-scroll-down
  (kbd "C-u")     'evil-scroll-up
  (kbd "C-w C-w") 'other-window)

(with-eval-after-load 'evil
  ;; use evil mode in the buffer created from calling `list-packages'.
  (add-to-list 'evil-buffer-regexps '("*Packages*" . normal))

  (with-eval-after-load 'package
    ;; movement keys j,k,l,h set up for free by defaulting to normal mode.
    ;; mark, unmark, install
    (evil-define-key 'normal package-menu-mode-map (kbd "m") #'package-menu-mark-install)
    (evil-define-key 'normal package-menu-mode-map (kbd "u") #'package-menu-mark-unmark)
    (evil-define-key 'normal package-menu-mode-map (kbd "x") #'package-menu-execute)))

(with-eval-after-load 'flycheck
  (flycheck-add-mode 'javascript-eslint 'typescript-mode))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ### OTHER STUFF ###
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
;; ~~~ [[ General ]] ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
;; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

;; Disable tool bar
(tool-bar-mode -1)
;; Override default vc-git-annotate command which is run on vc-annotate in .git files
(eval-after-load "vc-git"
  '(defun vc-git-annotate-command (file buf &optional rev)
     (let ((name (file-relative-name file)))
       (vc-git-command buf 'async nil "blame" "--date=iso" "-C" "-C" rev "--" name))
     )
  )
;; Visible alert instead of audio bell alert
(setq visible-bell 1)

(setq inhibit-startup-screen t)

;; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
;; ~~~ [[ TypeScript ]] ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
;; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
(defun setup-tide-mode ()
  (interactive)
  (tide-setup)
  (flycheck-mode +1)
  (setq flycheck-check-syntax-automatically '(save mode-enabled))
  (eldoc-mode +1)
  (tide-hl-identifier-mode +1)
  ;; company is an optional dependency. You have to
  ;; install it separately via package-install
  ;; `M-x package-install [ret] company`
  (company-mode +1))

;; aligns annotation to the right hand side
(setq company-tooltip-align-annotations t)

;; formats the buffer before saving
(add-hook 'typescript-mode-hook #'setup-tide-mode)

;; Linting .tsx
(add-to-list 'auto-mode-alist '("\\.tsx\\'" . typescript-mode))

;; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
;; ~~~ [[ Org Mode ]] ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
;; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
(add-to-list 'auto-mode-alist '("\\.org$" . org-mode))
(global-set-key "\C-cl" 'org-store-link)
(global-set-key "\C-ca" 'org-agenda)
(global-font-lock-mode 1)
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(fringe ((t (:background "#181a26")))))


;; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
;; ~~~ [[ Bug fixes ]] ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
;; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
(defun zc/tide-load-tsconfig (path &rest _ignored)
  "Overrides `tide-load-tsconfig'."
  (when (not (file-exists-p path))
    (error "tsconfig file not found at %S." path))
  (condition-case nil
      (let ((json-object-type 'plist)
            (json (shell-command-to-string "tsc --showConfig")))
        (json-read-from-string json))
    (error '())))

(advice-add 'tide-load-tsconfig :override #'zc/tide-load-tsconfig)
